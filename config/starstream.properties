# Some quick-access constants to make the actual configurations more readable
SIZE 640
RESOURCES 100
CHUNK_PLAYBACK_LENGTH 50
CHUNK_TTL CHUNK_PLAYBACK_LENGTH * 30

# how many cycles and their length
# one cycle for each node, one for each resource, one for collecting the state
# information
CYCLES 1000 + RESOURCES * CHUNK_PLAYBACK_LENGTH + CHUNK_TTL
CYCLE 1
START_STREAMING 2000

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 1
MAXDELAY 10

# drop is a probability, 0<=DROP<=1
DROP 0.2

##################################################### GENERAL SIMULATION SECTION

# seed to initialize the centralized PRNG
random.seed 1978

# how many nodes should be simulated
network.size SIZE

# simulation begins at time 0 and ends either when the event-queue is empty or when the time has
# reached the following value. Consider that time is advanced by message-delays
simulation.endtime CYCLE*CYCLES
# with which frequency PeerSim should log output indications about the progress of time
simulation.logtime CYCLE

# *-Stream node configuration
# Pastry specific params
network.node com.google.code.peersim.starstream.protocol.StarStreamNode
network.node.pastry pastry
network.node.maxLookupRetries 3
network.node.delayedLookupTime (CHUNK_TTL / 2) / network.node.maxLookupRetries
# *-Stream specific params
network.node.starstream starstream
network.node.startStreaming START_STREAMING
network.node.startStreamingTimeout CHUNK_PLAYBACK_LENGTH * 3
network.node.minContiguousChunksInBuffer 1
#network.node.waitBetweenForces 20
#network.node.aggressive true
network.node.advance 0
network.node.chunkPlaybackLength CHUNK_PLAYBACK_LENGTH
network.node.log starstream-nodes-
network.node.doLog true

############################################################## PROTOCOLS SECTION

# the 2D-coord protocol is used to assign each node a random bidimensional location
# used to compute distances between node-pairs
protocol.coordinates com.google.code.peersim.protocols.TwoDimCoordinatesProtocol

# the transport protocol used for modeling network delays
protocol.uniform UniformRandomTransport
protocol.uniform.mindelay MINDELAY
protocol.uniform.maxdelay MAXDELAY

# the transport protocol used for modeling network failures
protocol.unreliable peersim.transport.UnreliableTransport
protocol.unreliable.drop DROP
protocol.unreliable.transport uniform

# the Pastry protocol used to build the Pastry overlay-network
protocol.pastry com.google.code.peersim.pastry.protocol.PastryProtocol
protocol.pastry.b 4
protocol.pastry.L 16
protocol.pastry.M 32
protocol.pastry.timeOut MAXDELAY*5
protocol.pastry.maxHopsForLookups 60
protocol.pastry.transport unreliable
protocol.pastry.proximity coordinates
protocol.pastry.metric com.google.code.peersim.metrics.EuclideanMetric
protocol.pastry.log pastry-activity-
protocol.pastry.doLog true

# the *-Stream protocol used to stream the content
protocol.starstream com.google.code.peersim.starstream.protocol.StarStreamProtocol
protocol.starstream.aggressive true
protocol.starstream.starStoreSize 25
protocol.starstream.timeOut MAXDELAY*5
protocol.starstream.maxChunkRetries 30
protocol.starstream.curruptedMessages false
protocol.starstream.curruptedMessagesProbability 0
protocol.starstream.downStream 10000
protocol.starstream.upStream 6000
protocol.starstream.transport unreliable
protocol.starstream.reliableTransport uniform
protocol.starstream.pastryTransport pastry
protocol.starstream.log starstream-activity-
protocol.starstream.doLog true

########################################################### INITIALIZERS SECTION

# this initializer assigns each node a 2D coordinate
init.2DCoordAssigner com.google.code.peersim.protocols.initializers.TwoDimCoordinatesInitializer

# this initializer assigns each node a PastryID
init.pastryIdAssigner com.google.code.peersim.pastry.initializers.PastryIdInitializer

# the ordered sequence of initializers that must be run
include.init 2DCoordAssigner pastryIdAssigner

######################################################## PASTRY CONTROLS SECTION

# this control tells every Pastry node to check for expired messages at every time tick
control.pastryTimeoutTrigger com.google.code.peersim.pastry.controls.PastryTimeoutTrigger
control.pastryTimeoutTrigger.step CYCLE

# triggers the building of the Pastry overlay network
control.pastryOverlayBuilder com.google.code.peersim.pastry.controls.PastryOverlayBuilder
control.pastryOverlayBuilder.step CYCLE
control.pastryOverlayBuilder.log pastry-joins-hops-
control.pastryOverlayBuilder.doLog true

# this control class is in charge of assigning resoruces to active nodes in the pastry
# network
#control.resourceAssigner com.google.code.peersim.pastry.controls.PastryResourceAssigner
#control.resourceAssigner.step CYCLE
#control.resourceAssigner.startTime simulation.endtime/4
#control.resourceAssigner.resources RESOURCES
#control.resourceAssigner.log resource-assignments-hops-
#control.resourceAssigner.doLog true

# this control class is in charge of asking nodes to issue resoruce-lookup messages
# in the pastry network
#control.resourceFinder com.google.code.peersim.pastry.controls.PastryResourceFinder
#control.resourceFinder.step CYCLE
#control.resourceFinder.log resource-lookups-hops-
#control.resourceFinder.doLog true

# this control class resizes the pastry network at runtime
#control.netResizer com.google.code.peersim.pastry.controls.PastryOverlayResizer
#control.netResizer.init.0 com.google.code.peersim.protocols.initializers.TwoDimCoordinatesInitializer
#control.netResizer.init.1 com.google.code.peersim.pastry.initializers.PastryIdInitializer
#control.netResizer.step CYCLE
#control.netResizer.saveSendingNodes true
#control.netResizer.saveSearchingNodes true
#control.netResizer.maxsize SIZE*150/100
#control.netResizer.minsize SIZE*90/100
#control.netResizer.period 100
#control.netResizer.minTime simulation.endtime/8
#control.netResizer.maxTime simulation.endtime/8 * 2
#control.netResizer.log pastry-resizer-
#control.netResizer.doLog true

# this control class is used to simulate a churn in the pastry network
#control.churner com.google.code.peersim.pastry.controls.PastryChurner
#control.churner.init.0 com.google.code.peersim.protocols.initializers.TwoDimCoordinatesInitializer
#control.churner.init.1 com.google.code.peersim.pastry.initializers.PastryIdInitializer
#control.churner.step CYCLE
#control.churner.add 50
#control.churner.maxsize SIZE*150/100
#control.churner.minTime simulation.endtime/8
#control.churner.maxTime simulation.endtime/8 * 2
#control.churner.log pastry-churner-
#control.churner.doLog false

# used to dump each node state down to a file
control.stateTablesObserver com.google.code.peersim.pastry.controls.PastryStateTablesObserver
control.stateTablesObserver.step CYCLE
control.stateTablesObserver.log pastry-state-tables-

###################################################### *-STREAM CONTROLS SECTION

# this control class plays the role of the source node(s) in the *-stream network
control.starstreamSource com.google.code.peersim.starstream.controls.StarStreamSource
control.starstreamSource.step CYCLE
control.starstreamSource.advance 200
control.starstreamSource.chunkPlaybackLength CHUNK_PLAYBACK_LENGTH
control.starstreamSource.chunksPerTimeUnit 1
control.starstreamSource.nodesPerChunk SIZE*20/100
control.starstreamSource.elegibleNodeRetriesPercentage 10
control.starstreamSource.chunks RESOURCES
control.starstreamSource.ttl CHUNK_TTL
control.starstreamSource.start START_STREAMING
control.starstreamSource.ackTimeout MAXDELAY*5
control.starstreamSource.log starstream-source-
control.starstreamSource.doLog true

# this control logs to the configured file the content of each *-Stream node's *-Stream store
control.starstreamNodesObserver com.google.code.peersim.starstream.controls.StarStreamNodesObserver
control.starstreamNodesObserver.step CYCLE
control.starstreamNodesObserver.log starstream-stats-
control.starstreamNodesObserver.doLog true

# this control tells every *-Stream node to check for expired messages at every time tick
control.starstreamTimeoutTrigger com.google.code.peersim.starstream.controls.StarStreamTimeoutTrigger
control.starstreamTimeoutTrigger.step CYCLE

# this control tells every *-Stream node reset to zero their used bandwidth at every time tick
control.starstreamBandwidthReset com.google.code.peersim.starstream.controls.StarStreamProtocolBandwidthReset
control.starstreamBandwidthReset.step CYCLE
